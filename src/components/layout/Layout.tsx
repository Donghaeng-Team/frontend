import React, { useState, useRef } from 'react';
import Header from '../Header';
import Footer from '../Footer';
import type { NotificationItem } from '../NotificationModal';
import type { ChatRoom } from '../ChatRoomListModal';
import './Layout.css';

interface LayoutProps {
  children: React.ReactNode;
  notificationCount?: number;
  currentLocation?: string;
  onLocationChange?: () => void;
  onNotificationClick?: () => void;
  onFavoriteClick?: () => void;
  onChatClick?: () => void;
  onProfileClick?: () => void;
}

const Layout: React.FC<LayoutProps> = ({
  children,
  notificationCount = 0,
  currentLocation,
  onLocationChange,
  onNotificationClick,
  onFavoriteClick,
  onChatClick,
  onProfileClick
}) => {
  const [isNotificationModalOpen, setIsNotificationModalOpen] = useState(false);
  const [isChatRoomListModalOpen, setIsChatRoomListModalOpen] = useState(false);
  const notificationButtonRef = useRef<HTMLButtonElement>(null);

  console.log('Layout rendered:', {
    isNotificationModalOpen,
    isChatRoomListModalOpen
  });

  // ÏÉòÌîå ÏïåÎ¶º Îç∞Ïù¥ÌÑ∞
  const sampleNotifications: NotificationItem[] = [
    {
      id: '1',
      type: 'completed',
      icon: '‚úÖ',
      title: 'Í≥µÎèôÍµ¨Îß§ ÏôÑÎ£å',
      content: 'Ï†úÏ£º Í∞êÍ∑§ 10kg Í≥µÎèôÍµ¨Îß§Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.',
      time: '10Î∂Ñ Ï†Ñ'
    },
    {
      id: '2',
      type: 'message',
      icon: 'üí¨',
      title: 'ÏÉàÎ°úÏö¥ Î©îÏãúÏßÄ',
      content: 'ÏÇ¨Í≥º Í≥µÎèôÍµ¨Îß§ÏóêÏÑú ÏÉàÎ°úÏö¥ Î©îÏãúÏßÄÍ∞Ä ÎèÑÏ∞©ÌñàÏäµÎãàÎã§.',
      time: '1ÏãúÍ∞Ñ Ï†Ñ'
    },
    {
      id: '3',
      type: 'deadline',
      icon: '‚è∞',
      title: 'ÎßàÍ∞ê ÏûÑÎ∞ï',
      content: 'Ïú†Í∏∞ÎÜç ÏÇ¨Í≥º Í≥µÎèôÍµ¨Îß§ ÎßàÍ∞êÍπåÏßÄ 2ÏãúÍ∞Ñ ÎÇ®ÏïòÏäµÎãàÎã§.',
      time: '2ÏãúÍ∞Ñ Ï†Ñ'
    }
  ];

  const handleNotificationClick = () => {
    console.log('handleNotificationClick called in Layout!');
    setIsNotificationModalOpen(true);
    onNotificationClick?.();
  };

  const handleNotificationItemClick = (notification: NotificationItem) => {
    console.log('Notification clicked:', notification);
    setIsNotificationModalOpen(false);
  };

  const handleMarkAllRead = () => {
    console.log('Mark all as read');
  };

  // ÏÉòÌîå Ï±ÑÌåÖÎ∞© Îç∞Ïù¥ÌÑ∞
  const sampleChatRooms: ChatRoom[] = [
    {
      id: '1',
      productName: 'Ï†úÏ£º Í∞êÍ∑§ 10kg Í≥µÎèôÍµ¨Îß§',
      productImage: '',
      lastMessage: 'ÌåêÎß§Ïûê: ÌòÑÏû¨ 7Î™Ö Ï∞∏Ïó¨Ï§ëÏûÖÎãàÎã§! ...',
      lastMessageTime: '2ÏãúÍ∞Ñ Ï†Ñ',
      unreadCount: 3,
      participants: { current: 7, max: 10 },
      status: 'active'
    },
    {
      id: '2',
      productName: 'Ïï†Ìîå ÏóêÏñ¥Ìåü ÌîÑÎ°ú Í≥µÎèôÍµ¨Îß§',
      lastMessage: 'Íµ¨Îß§Ïûê: Î∞∞ÏÜ°ÏùÄ Ïñ∏Ï†úÏØ§ Î∞õÏùÑ Ïàò...',
      lastMessageTime: '30Î∂Ñ Ï†Ñ',
      unreadCount: 1,
      participants: { current: 5, max: 8 },
      status: 'active'
    },
    {
      id: '3',
      productName: 'Ïä§ÌÉÄÎ≤ÖÏä§ ÌÖÄÎ∏îÎü¨ Í≥µÎèôÍµ¨Îß§',
      lastMessage: 'ÌåêÎß§Ïûê: ÎßàÍ∞ê ÏûÑÎ∞ï! 2Î™ÖÎßå Îçî Î™®Ïßë...',
      lastMessageTime: '1ÏãúÍ∞Ñ Ï†Ñ',
      participants: { current: 18, max: 20 },
      status: 'closing'
    }
  ];

  const handleChatClick = () => {
    console.log('handleChatClick called in Layout!');
    setIsChatRoomListModalOpen(true);
    onChatClick?.();
  };

  const handleChatRoomClick = (roomId: string) => {
    console.log('Chat room clicked:', roomId);
    setIsChatRoomListModalOpen(false);
  };

  return (
    <div className="layout">
      <Header
        notificationCount={notificationCount}
        currentLocation={currentLocation}
        onLocationChange={onLocationChange}
        onNotificationClick={handleNotificationClick}
        onFavoriteClick={onFavoriteClick}
        onChatClick={handleChatClick}
        onProfileClick={onProfileClick}
        notificationButtonRef={notificationButtonRef}
      />
      <main className="layout-main">
        {children}
      </main>
      <Footer />
      
      {/* ÏïåÎ¶º Î™®Îã¨ */}
      {isNotificationModalOpen && (
        <div 
          style={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            backgroundColor: 'rgba(255,0,0,0.8)',
            zIndex: 999999,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center'
          }}
          onClick={() => {
            console.log('NotificationModal closing');
            setIsNotificationModalOpen(false);
          }}
        >
          <div 
            style={{
              backgroundColor: '#ffffff',
              borderRadius: '12px',
              padding: '20px',
              maxWidth: '400px',
              width: '90vw',
              maxHeight: '80vh',
              overflow: 'auto',
              border: '5px solid #00ff00'
            }}
            onClick={(e) => e.stopPropagation()}
          >
            <h2 style={{ margin: '0 0 20px 0', fontSize: '18px', fontWeight: '600' }}>
              üîî ÏïåÎ¶º
            </h2>
            <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>
              {sampleNotifications.map((notification) => (
                <div
                  key={notification.id}
                  style={{
                    padding: '16px',
                    border: '1px solid #e0e0e0',
                    borderRadius: '8px',
                    cursor: 'pointer',
                    backgroundColor: '#f9f9f9'
                  }}
                  onClick={() => handleNotificationItemClick(notification)}
                >
                  <div style={{ fontWeight: '600', marginBottom: '4px' }}>
                    {notification.icon} {notification.title}
                  </div>
                  <div style={{ fontSize: '14px', color: '#666', marginBottom: '4px' }}>
                    {notification.content}
                  </div>
                  <div style={{ fontSize: '12px', color: '#999' }}>
                    {notification.time}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}
      
      {/* Ï±ÑÌåÖÎ∞© Î™©Î°ù Î™®Îã¨ */}
      {isChatRoomListModalOpen && (
        <div 
          style={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            backgroundColor: 'rgba(255,0,0,0.8)',
            zIndex: 999999,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center'
          }}
          onClick={() => {
            console.log('ChatRoomListModal closing');
            setIsChatRoomListModalOpen(false);
          }}
        >
          <div 
            style={{
              backgroundColor: '#ffffff',
              borderRadius: '12px',
              padding: '20px',
              maxWidth: '600px',
              width: '90vw',
              maxHeight: '80vh',
              overflow: 'auto',
              border: '5px solid #0000ff'
            }}
            onClick={(e) => e.stopPropagation()}
          >
            <h2 style={{ margin: '0 0 20px 0', fontSize: '18px', fontWeight: '600' }}>
              üí¨ Ï∞∏Ïó¨Ï§ëÏù∏ Ï±ÑÌåÖÎ∞©
            </h2>
            <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>
              {sampleChatRooms.map((room) => (
                <div
                  key={room.id}
                  style={{
                    padding: '16px',
                    border: '1px solid #e0e0e0',
                    borderRadius: '8px',
                    cursor: 'pointer',
                    backgroundColor: '#f9f9f9'
                  }}
                  onClick={() => handleChatRoomClick(room.id)}
                >
                  <div style={{ fontWeight: '600', marginBottom: '4px' }}>
                    {room.productName}
                  </div>
                  <div style={{ fontSize: '14px', color: '#666', marginBottom: '4px' }}>
                    {room.lastMessage}
                  </div>
                  <div style={{ fontSize: '12px', color: '#999' }}>
                    {room.lastMessageTime} ‚Ä¢ {room.participants.current}/{room.participants.max}Î™Ö
                    {room.unreadCount && room.unreadCount > 0 && (
                      <span style={{ 
                        backgroundColor: '#ff4444', 
                        color: 'white', 
                        borderRadius: '10px', 
                        padding: '2px 6px', 
                        fontSize: '10px',
                        marginLeft: '8px'
                      }}>
                        {room.unreadCount}
                      </span>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Layout;